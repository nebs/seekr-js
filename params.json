{"name":"Seekr-js","tagline":"Flexible JS Pathfinding Engine","body":"SeekrJS\r\n========\r\nSeekrJS is a flexible pathfinding engine written in Javascript.\r\n\r\nOverview\r\n---------\r\nThe pathfinding engine is completely decoupled from the underlying node data structure. So it works equally well with graphs and grids for example.\r\n\r\nBasic usage\r\n-------------\r\n```javascript\r\nseekr = new Seekr(delegate);\r\npath  = seekr.seek();\r\n```\r\n\r\nHow it works\r\n-------------\r\nThe pathfinding is handled by [Seekr](seekr.js).\r\n\r\n`Seekr` knows nothing about how your nodes are structures. For that, it relies on the delegate.\r\n\r\nOnce you initialize `Seekr` with a delegate, simply call `seek()` and it will return an array of nodes representing the shortest path between the start and end nodes.\r\n\r\nThe delegate defines which nodes are the start and end nodes of the path.\r\n\r\nDelegate\r\n---------\r\nWhen initializing `Seekr` you must provide a delegate.\r\n\r\nThe delegate can be any object but it must implement the following functions:\r\n\r\n```javascript\r\nstart() {\r\n    // Return the starting node of the path\r\n    return startNode;\r\n}\r\n\r\nend() {\r\n    // Return the ending node of the path\r\n    return endNode;\r\n}\r\n\r\nneighbors(node) {\r\n    // Return an array of nodes that are neighbors of the given node\r\n    return neighborNodes;\r\n}\r\n\r\nheuristic(nodeA, nodeB) {\r\n    // Return the heuristic cost (a number) for the path from nodeA to nodeB\r\n    return theHeuristic;\r\n}\r\n\r\ncost(nodeA, nodeB) {\r\n    // Return the cost (a number) for moving from nodeA to nodeB\r\n    return theCost;\r\n}\r\n\r\nequal(nodeA, nodeB) {\r\n    // Return true if nodeA and nodeB are equal, false otherwise\r\n    return areEqual;\r\n}\r\n```\r\n\r\nThe *node* can be any object, `Seekr` doesn't care what nodes are and how they're represented. That is ultimately the responsability of the delegate.\r\n\r\n2D Grid Demo\r\n-------------\r\n\r\nThe most common use of pathfinding algorithms is with 2D grids.\r\n\r\n`Seekr` can easily be used for this puspose.\r\n\r\nThere are a few included objects to demonstrate this:\r\n\r\n* [SeekrGrid2DDelegate](delegates/seekr-grid-2d-delegate.js) : A sample delegate for 2D grids\r\n* [Grid2D](grid2d/grid2d.js) : An object for representing 2D grids\r\n* [Grid2DArtist](grid2d/grid2d-artist.js) : An object for drawing 2D grids\r\n\r\nNone of these files are required, but they make it easier to demo `Seekr`'s functionality.\r\n\r\nHere's an example from [demo.js](demo/demo.js):\r\n\r\n```javascript\r\n// Initialize a simple grid\r\ngrid = new Grid2D([[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n                   [0, 1, 0, 0, 1, 0, 0, 0, 1, 0],\r\n                   [0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\r\n                   [0, 1, 0, 0, 0, 0, 1, 0, 3, 0],\r\n                   [0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n                   [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\r\n                   [0, 1, 2, 1, 0, 1, 0, 0, 0, 0],\r\n                   [0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\r\n                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]);\r\n\r\n// Create the artist by feeding it a Canvas object\r\nartist = new Grid2DArtist(document.getElementById('main-canvas'));\r\n\r\n// Create the delegate by feeding it the grid\r\ndelegate = new SeekrGrid2DDelegate(grid);\r\n\r\n// Create the Seekr by feeding it the delegate\r\nseekr = new Seekr(delegate);\r\n\r\n// Find the shortest path\r\npath = seekr.seek();\r\n\r\n// Optionally update the grid to include the path (for drawing)\r\n\r\n// Draw the grid\r\nartist.draw(grid);\r\n```\r\n\r\nThe bulk of the work is done by `seekr.seek()`. The rest of the code is primarily for setting up and drawing the grid.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}